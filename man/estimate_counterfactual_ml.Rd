% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treatment.R
\name{estimate_counterfactual_ml}
\alias{estimate_counterfactual_ml}
\title{Estimate counterfactual performance of another algorithm}
\usage{
estimate_counterfactual_ml(
  data,
  qps = "QPS",
  Y = "Y",
  Z = "Z",
  ml_out = "ML1",
  cf_ml_out = "ML2",
  verbose = T
)
}
\arguments{
\item{data}{Dataset containing QPS, Y, Z, the original ML algorithm predictions,
and the counterfactual ML' algorithm predictions.}

\item{qps}{Column name of QPS variable. Defaults to "QPS".}

\item{Y}{Column name of Y variable. Defaults to "Y".}

\item{Z}{Column name of Z variable. Defaults to "Z".}

\item{ml_out}{Column name of original ML prediction variable. Defaults to "ML1".}

\item{cf_ml_out}{Column name of counterfactual ML' prediction variable. Defaults to "ML2".}

\item{verbose}{Boolean indicator for whether to print summary output of estimation. Defaults to True.}
}
\value{
List containing counterfactual predictions and fitted lm model object.
}
\description{
Estimate counterfactual performance of another algorithm
}
\details{
The process of estimating counterfactual value works as follows. First we we fit the
below OLS regression using historical recommendations and outcome \code{Z} and \code{Y}.
\mjdeqn{Y_i = \beta_0 + \beta_1 Z_i + \beta_2 p^s(X_i; \delta) + \epsilon_i}{Y_i = beta_0 + beta_1 Z_i + beta_2 p^s(X_i; delta) + epsilon_i}
where \mjeqn{\beta_1} is our estimated effect of treatment recommendation.

Then we take the original algorithm output \code{ml_out} and the counterfactual algorithm output \code{cf_ml_out}
and estimate the below value equation.
\mjdeqn{\hat{V}(ML') = \frac{1}{n} \sum_{i=1}^n (Y_i + \hat{\beta_{ols}}(ML'(X_i) - ML(X_i)))}
}
