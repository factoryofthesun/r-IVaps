% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treatment.R
\name{estimate_treatment_effect}
\alias{estimate_treatment_effect}
\title{Main treatment effect estimation function}
\usage{
estimate_treatment_effect(
  data = NULL,
  aps = NULL,
  Y = NULL,
  Z = NULL,
  D = NULL,
  degen = c(0, 1),
  apslab = "APS",
  ylab = "Y",
  zlab = "Z",
  dlab = "D",
  estimator = "2SLS",
  verbose = T
)
}
\arguments{
\item{data}{Dataset containing APS, Y, Z, and D data.}

\item{aps}{Vector of APS values.}

\item{Y}{Vector of outcome values.}

\item{Z}{Vector of ML recommendation values.}

\item{D}{Vector of treatment assignment values.}

\item{degen}{Vector of values for which APS is degenerate. Defaults to c(0,1).}

\item{apslab}{Column name of APS variable. Defaults to "APS".}

\item{ylab}{Column name of Y variable. Defaults to "Y".}

\item{zlab}{Column name of Z variable. Defaults to "Z".}

\item{dlab}{Column name of D variable. Defaults to "D".}

\item{estimator}{String method of IV estimation. Defaults to "2SLS".}

\item{verbose}{Boolean indicator for whether to print summary output of estimation. Defaults to True.}
}
\value{
Fitted ivreg model object.
}
\description{
Main treatment effect estimation function
}
\details{
If the primary data vectors (aps, Y, Z, D) are not passed, then the fallback is to search for the
\verb{_lab} variables in the \code{data} object.

Treatment effect is estimated using IV estimation The default is to use the 2SLS method
of estimation, with the equations illustrated below.
\deqn{D_i = \gamma_0(1-I) + \gamma_1 Z_i + \gamma_2 p^s(X_i;\delta) + v_i}
\deqn{Y_i = \beta_0(1-I) + \beta_1 D_i + \beta_2 p^s(X_i;\delta) + \epsilon_i}
\eqn{\beta_1} is our causal estimation of the treatment effect. I is an indicator for if the ML funtion takes only a single
nondegenerate value in the sample.
}
\examples{
# Iris data
data("iris")
assign_cutoff <- function(X, cutoff){
  ret <- as.integer(X > cutoff)
  return(ret)
}
model <- lm(Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width, data=iris)
aps <- estimate_aps(iris, model, xc = names(iris)[2:4],
          infer=FALSE, s=400, delta=0.8, fcn=assign_cutoff, cutoff=6)

# Can send treatment effect inputs in two different ways
Y_val <- iris$Sepal.Length
Z_val <- assign_cutoff(iris$Sepal.Length, 6)
D_val <- predict(model, iris)
iris[, Y := Y_val]
iris[, Z := Z_val]
iris[, D := D_val]
iris[, APS := aps]
estimate_treatment_effect(aps = aps, Y = Y_val, Z = Z_val, D = D_val)
estimate_treatment_effect(iris, apslab = "APS", ylab = "Sepal.Length", zlab = "Z",
                          dlab = "D")
}
